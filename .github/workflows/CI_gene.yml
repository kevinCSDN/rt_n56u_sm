name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'     
        required: false
        default: 'no'
  release:
    types: [published]

jobs:
  build:
    name: build
    runs-on: ubuntu-22.04
    if: ${{ !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) }}
    env:
      build_variant: ${{ matrix.build_variant }}
      targets: ${{ matrix.targets }}
      images_dir: /opt/images
    strategy:
      matrix:
        include:
          - build_variant: "mt7621-usb"
            targets: "XY-C1 JCG-836PRO JCG-AC860M JCG-Y2 DIR-882 A3004NS MSG1500 WR1200JS MI-R3G NEWIFI3 B70"
    steps:
      - uses: actions/checkout@v2

      - name: Prepare environment
        run: |
          sudo apt update
          sudo apt install -y unzip libtool-bin curl cmake gperf gawk flex bison nano xxd fakeroot \
          cpio git python3-docutils gettext automake autopoint texinfo build-essential help2man \
          pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget

      - name: Prepare toolchain
        run: |
          cd toolchain-mipsel
          sh dl_toolchain.sh

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'yes' }}
        with:
          limit-access-to-actor: true

      - name: Configure .config
        run: |
          cd trunk
          cp -f configs/templates/${{ env.build_variant }}.config .config
          # 删除旧的 smartdns 配置（如果存在）
          sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config
          # 添加新的 smartdns 配置
          echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=y" >> .config
          echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNSBIN=y" >> .config

      - name: Start build
        run: |
          cd trunk
          mkdir -p ${images_dir}
          for m in $targets; do fakeroot ./build_firmware_ci $m; \
          if [ $? = 0 ]; then cp -f images/*.trx ${images_dir}/$m.trx; else exit 1; fi; \
          ./clear_tree_simple >/dev/null 2>&1; done

      - name: Create archive
        if: ${{ github.event_name != 'release' && success() }}
        run: |
          ls -lh ${images_dir}
          GIT_VERSION=`git rev-parse --short=7 HEAD 2>/dev/null` && [ -n "$GIT_VERSION" ] && \
          image_name=images_${build_variant}_${GIT_VERSION} || image_name=images_${build_variant}
          cd ${images_dir}; md5sum *.trx |tee md5sum.txt; 7z a -mx=9 ${image_name}.7z ./*
          echo "image_name=${image_name}" >> $GITHUB_ENV

      - name: Upload images to Artifact
        if: ${{ github.event_name != 'release' && success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.image_name }}
          path: ${{ env.images_dir }}/*.7z

      - name: Create Release
        if: ${{ github.event_name == 'release' && success() }}
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload images to Releases
        if: ${{ github.event_name == 'release' && success() }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.images_dir }}/*.trx
          asset_name: firmware.trx
          asset_content_type: application/octet-stream
